{"ast":null,"code":"import { actionIdentifier } from './actions';\nimport { User, Article, Rating } from './types';\nimport SampleData from './SampleData.json'; //Function that creates our sample data for the app from a Json file\n\nfunction loadSampleData() {\n  let array = [];\n\n  for (let article of SampleData.articles) {\n    let rating = new Rating(article.rating.current, article.rating.readable, article.rating.objective, article.rating.cited, article.rating.numRatings);\n    let newArticle = new Article(article.id, article.title, article.url, rating, article.keywords);\n    array.push(newArticle);\n  }\n\n  const state = {\n    idCounter: 10,\n    currentArticle: array[0],\n    articles: array,\n    currentUser: null,\n    searchedArticles: [],\n    keywords: \"\"\n  };\n  return state;\n} // Initial state of the app:\n\n\nconst initialState = loadSampleData();\n\nfunction disMisReducer(state, action) {\n  if (state === undefined) {\n    return initialState;\n  }\n\n  const nextId = state.idCounter + 1; // Interactions with the database happen here\n\n  switch (action.type) {\n    case actionIdentifier.Join:\n      {\n        let joinAction = action;\n        let newState = { ...state\n        };\n        newState.currentUser = new User(nextId, joinAction.email, joinAction.password);\n        newState.idCounter = nextId;\n        return newState;\n      }\n\n    case actionIdentifier.Search:\n      {\n        // Parse keyword\n        // Match keywords with query \n        // return articles that match the query \n        let searchAction = action;\n        let query = searchAction.query.split(\" \"); // Searches the articles for the articles that match the keywords\n\n        let results = filterArticles(query, state.articles);\n        let newState = { ...state\n        }; // Set the keywords of the search to be stored in the keywords part of the state\n\n        newState.keywords = searchAction.query; //Assigns the searched articles to the app state\n\n        newState.searchedArticles = results;\n        console.log(\"Search newState:\");\n        console.log(newState);\n        return newState;\n      }\n\n    case actionIdentifier.Rate:\n      {\n        //TODO: Add a rating to an article and incorporate it into the database\n        let rateAction = action;\n        let newState = { ...state\n        }; //Grabs the current article\n\n        let ratedArticle = newState.currentArticle;\n        ratedArticle.rating.addRating(rateAction.current, rateAction.readable, rateAction.objective, rateAction.cited);\n        let newArticleArray = newState.articles.map(article => {\n          return article.id === ratedArticle.id ? ratedArticle : article;\n        });\n        newState.articles = newArticleArray;\n        console.log(\"Rate NewState:\");\n        console.log(newState);\n        return newState;\n      }\n\n    case actionIdentifier.Add:\n      {\n        //TODO: Add an article to the database along with a rating\n        let addAction = action;\n        let newState = { ...state\n        }; // Create a new article object that has the first rating attached to it\n\n        let newArticle = new Article(nextId, addAction.title, addAction.url, addAction.rating, addAction.keywords); // Add that new article to our \"database\"\n\n        newState.articles.push(newArticle); //Set the new article to be the current article\n\n        newState.currentArticle = newArticle;\n        console.log(\"Add newState:\");\n        console.log(newState);\n        return newState;\n      }\n\n    case actionIdentifier.Select:\n      {\n        let selectAction = action;\n        let newState = { ...state\n        }; // Takes in the article clicked on from the article tile and sets it to be the current article \n\n        newState.currentArticle = selectAction.article;\n        console.log(\"Select newState:\");\n        console.log(newState);\n        return newState;\n      }\n\n    default:\n      return state;\n  }\n}\n\nexport default disMisReducer; // Functions used within the reducer\n\n{\n  /* \n     Filter function that searches for any article that matches any keyword. Currently lacks any complex keyword matching\n  */\n}\n\nfunction filterArticles(query, articles) {\n  let filtered = [];\n  articles.map(article => {\n    for (const keyword of article.keywords) {\n      for (const str of query) {\n        if (keyword.toUpperCase() === str.toUpperCase() && !filtered.includes(article)) {\n          filtered.push(article);\n        }\n      }\n    }\n\n    return null;\n  });\n  return filtered;\n}","map":{"version":3,"sources":["/Users/hiwottadesse/Desktop/dismis/src/redux/reducer.tsx"],"names":["actionIdentifier","User","Article","Rating","SampleData","loadSampleData","array","article","articles","rating","current","readable","objective","cited","numRatings","newArticle","id","title","url","keywords","push","state","idCounter","currentArticle","currentUser","searchedArticles","initialState","disMisReducer","action","undefined","nextId","type","Join","joinAction","newState","email","password","Search","searchAction","query","split","results","filterArticles","console","log","Rate","rateAction","ratedArticle","addRating","newArticleArray","map","Add","addAction","Select","selectAction","filtered","keyword","str","toUpperCase","includes"],"mappings":"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","sourcesContent":["import { DisMisActions, actionIdentifier, JoinAction, SearchAction, RateAction, AddAction, SelectAction } from './actions'\nimport { DisMisState, User, Article, Rating } from './types';\nimport SampleData from './SampleData.json';\n\n//Function that creates our sample data for the app from a Json file\nfunction loadSampleData() {\n    let array = []\n    for (let article of SampleData.articles) {\n        let rating = new Rating(article.rating.current, article.rating.readable, article.rating.objective, article.rating.cited, article.rating.numRatings)\n        let newArticle = new Article(article.id, article.title, article.url, rating, article.keywords)\n        array.push(newArticle);\n    }\n    const state: DisMisState = {\n        idCounter: 10,\n        currentArticle: array[0],\n        articles: array,\n        currentUser: null,\n        searchedArticles: [],\n        keywords: \"\"\n    }\n    return state;\n}\n\n// Initial state of the app:\nconst initialState: DisMisState = loadSampleData()\n\nfunction disMisReducer(state: DisMisState | undefined, action: DisMisActions): DisMisState {\n    if (state === undefined) {\n        return initialState;\n    }\n\n    const nextId = state.idCounter + 1;\n\n\n    // Interactions with the database happen here\n    switch (action.type) {\n        case actionIdentifier.Join: {\n            let joinAction = action as JoinAction;\n            let newState: DisMisState = { ...state };\n\n            newState.currentUser = new User(nextId, joinAction.email, joinAction.password);\n            newState.idCounter = nextId;\n\n            return newState;\n        }\n        case actionIdentifier.Search: {\n\n            // Parse keyword\n            // Match keywords with query \n            // return articles that match the query \n\n            let searchAction = action as SearchAction;\n            let query = searchAction.query.split(\" \");\n\n            // Searches the articles for the articles that match the keywords\n            let results = filterArticles(query, state.articles)\n\n            let newState: DisMisState = { ...state };\n\n            // Set the keywords of the search to be stored in the keywords part of the state\n            newState.keywords = searchAction.query;\n\n            //Assigns the searched articles to the app state\n            newState.searchedArticles = results;\n\n            console.log(\"Search newState:\")\n            console.log(newState);\n\n            return newState;\n        }\n        case actionIdentifier.Rate: {\n            //TODO: Add a rating to an article and incorporate it into the database\n            let rateAction = action as RateAction;\n            let newState: DisMisState = { ...state };\n\n            //Grabs the current article\n            let ratedArticle = newState.currentArticle;\n\n            ratedArticle.rating.addRating(rateAction.current, rateAction.readable, rateAction.objective, rateAction.cited)\n            let newArticleArray = newState.articles.map( article => {\n                return ((article.id === ratedArticle.id) ? ratedArticle : article )\n            })\n\n            newState.articles = newArticleArray;\n\n            console.log(\"Rate NewState:\")\n            console.log(newState);\n\n            return newState;\n        }\n        case actionIdentifier.Add: {\n            //TODO: Add an article to the database along with a rating\n        \n            let addAction = action as AddAction;\n            let newState: DisMisState = { ...state };\n\n            // Create a new article object that has the first rating attached to it\n            let newArticle = new Article(nextId,addAction.title, addAction.url, addAction.rating, addAction.keywords);\n            \n            // Add that new article to our \"database\"\n            newState.articles.push(newArticle);\n\n            //Set the new article to be the current article\n            newState.currentArticle = newArticle;\n\n            console.log(\"Add newState:\")\n            console.log(newState);\n            \n            return newState;\n        }\n        case actionIdentifier.Select: {\n            let selectAction = action as SelectAction;\n            let newState: DisMisState = { ...state };\n\n            // Takes in the article clicked on from the article tile and sets it to be the current article \n            newState.currentArticle = selectAction.article;\n            console.log(\"Select newState:\")\n            console.log(newState);\n\n            return newState;\n        }\n        default:\n            return state;\n    }\n}\n\nexport default disMisReducer;\n\n// Functions used within the reducer\n\n{/* \n    Filter function that searches for any article that matches any keyword. Currently lacks any complex keyword matching\n*/}\nfunction filterArticles(query: Array<string>, articles: Array<Article>) {\n    let filtered: Article[] = []\n    articles.map(article => {\n        for (const keyword of article.keywords){\n            for (const str of query){\n\n                if ((keyword.toUpperCase() === str.toUpperCase()) && !filtered.includes(article)){\n                    filtered.push(article)\n                }\n            }\n        }\n        return null;\n    })\n    return filtered;\n}\n\n"]},"metadata":{},"sourceType":"module"}