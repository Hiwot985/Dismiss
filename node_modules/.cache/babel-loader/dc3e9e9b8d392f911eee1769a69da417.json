{"ast":null,"code":"var _jsxFileName = \"/Users/hiwottadesse/Desktop/dismis/src/ListviewPage.tsx\";\nimport React from \"react\";\nimport ArticleTile from \"./components/ListviewPage/ArticleTile\";\nimport \"./App.css\";\nimport { pages } from './App';\nimport './components/ListviewPage/ListviewPage.css'; // Redux Imports\n\nimport { connect } from 'react-redux';\n\nclass ListviewPage extends React.Component {\n  render() {\n    if (this.props.articles.length === 0) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"listview\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 11\n        }\n      }, \"No results  for \", this.props.keywords), /*#__PURE__*/React.createElement(\"button\", {\n        onClick: e => this.props.changePage(pages.HomePage),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 11\n        }\n      }, \" Back \"), /*#__PURE__*/React.createElement(\"div\", {\n        id: \"listview-article-container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"listview-article-tile\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"h3\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 15\n        }\n      }, \"No Articles Found\"))));\n    } else {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"listview\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 11\n        }\n      }, \"Search results for \", this.props.keywords), /*#__PURE__*/React.createElement(\"button\", {\n        onClick: e => this.props.changePage(pages.HomePage),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 11\n        }\n      }, \" Back \"), /*#__PURE__*/React.createElement(\"div\", {\n        id: \"listview-article-container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 11\n        }\n      }, this.props.articles.map(article => {\n        return /*#__PURE__*/React.createElement(ArticleTile, {\n          key: article.id,\n          article: article,\n          changePage: this.props.changePage,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 24\n          }\n        });\n      })));\n    }\n  }\n\n} // Map redux state to component state\n// This function subscribes to all store updates and gets called when\n// anything in the store changes. \n// It return an object containing the store data you\n// want to transmit as props to a component\n\n\nfunction mapStateToProps(state) {\n  return {\n    articles: state.searchedArticles,\n    keywords: state.keywords\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {// Because this component doesn't change the state of the app at all\n    // we're going to leave this empty\n  };\n}\n\nlet connectedComponent = connect(mapStateToProps, mapDispatchToProps)(ListviewPage);\nexport default connectedComponent;","map":{"version":3,"sources":["/Users/hiwottadesse/Desktop/dismis/src/ListviewPage.tsx"],"names":["React","ArticleTile","pages","connect","ListviewPage","Component","render","props","articles","length","keywords","e","changePage","HomePage","map","article","id","mapStateToProps","state","searchedArticles","mapDispatchToProps","dispatch","connectedComponent"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,uCAAxB;AACA,OAAO,WAAP;AACA,SAASC,KAAT,QAAsB,OAAtB;AACA,OAAO,4CAAP,C,CAEA;;AAEA,SAASC,OAAT,QAAwB,aAAxB;;AAOA,MAAMC,YAAN,SAA2BJ,KAAK,CAACK,SAAjC,CAAmE;AACjEC,EAAAA,MAAM,GAAG;AACP,QAAI,KAAKC,KAAL,CAAWC,QAAX,CAAoBC,MAApB,KAA+B,CAAnC,EAAsC;AACpC,0BACE;AAAK,QAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAqB,KAAKF,KAAL,CAAWG,QAAhC,CADF,eAEE;AAAQ,QAAA,OAAO,EAAEC,CAAC,IAAI,KAAKJ,KAAL,CAAWK,UAAX,CAAsBV,KAAK,CAACW,QAA5B,CAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF,eAGE;AAAK,QAAA,EAAE,EAAC,4BAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAK,QAAA,SAAS,EAAC,uBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BADF,CADF,CAHF,CADF;AAWD,KAZD,MAaK;AACH,0BAEE;AAAK,QAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAAwB,KAAKN,KAAL,CAAWG,QAAnC,CADF,eAEE;AAAQ,QAAA,OAAO,EAAEC,CAAC,IAAI,KAAKJ,KAAL,CAAWK,UAAX,CAAsBV,KAAK,CAACW,QAA5B,CAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF,eAGE;AAAK,QAAA,EAAE,EAAC,4BAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEI,KAAKN,KAAL,CAAWC,QAAX,CAAoBM,GAApB,CAAwBC,OAAO,IAAI;AACjC,4BAAO,oBAAC,WAAD;AAAa,UAAA,GAAG,EAAEA,OAAO,CAACC,EAA1B;AAA8B,UAAA,OAAO,EAAED,OAAvC;AAAgD,UAAA,UAAU,EAAE,KAAKR,KAAL,CAAWK,UAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,OAFD,CAFJ,CAHF,CAFF;AAcD;AACF;;AA/BgE,C,CAoCnE;AACA;AACA;AACA;AACA;;;AACA,SAASK,eAAT,CAAyBC,KAAzB,EAA6C;AAC3C,SAAO;AACLV,IAAAA,QAAQ,EAAEU,KAAK,CAACC,gBADX;AAELT,IAAAA,QAAQ,EAAEQ,KAAK,CAACR;AAFX,GAAP;AAID;;AAED,SAASU,kBAAT,CAA4BC,QAA5B,EAA2C;AACzC,SAAO,CACL;AACA;AAFK,GAAP;AAID;;AAGD,IAAIC,kBAAkB,GAAGnB,OAAO,CAC9Bc,eAD8B,EAE9BG,kBAF8B,CAAP,CAGvBhB,YAHuB,CAAzB;AAMA,eAAekB,kBAAf","sourcesContent":["import React from \"react\";\nimport ArticleTile from \"./components/ListviewPage/ArticleTile\";\nimport \"./App.css\";\nimport { pages } from './App';\nimport './components/ListviewPage/ListviewPage.css'\n\n// Redux Imports\nimport { Article, DisMisState } from './redux/types';\nimport { connect } from 'react-redux'\ninterface ListviewPageProps {//Contructor like for the page, these two methods are provided by the App for AddItemsPage to use\n  changePage: (page: pages) => void;\n  articles: Array<Article>;\n  keywords: string;\n}\n\nclass ListviewPage extends React.Component<ListviewPageProps, any> {\n  render() {\n    if (this.props.articles.length === 0) {\n      return (\n        <div className=\"listview\">\n          <h1>No results  for {this.props.keywords}</h1>\n          <button onClick={e => this.props.changePage(pages.HomePage)}> Back </button>\n          <div id=\"listview-article-container\">\n            <div className=\"listview-article-tile\">\n              <h3>No Articles Found</h3>\n            </div>\n          </div>\n        </div>\n      )\n    }\n    else {\n      return (\n\n        <div className=\"listview\">\n          <h1>Search results for {this.props.keywords}</h1>\n          <button onClick={e => this.props.changePage(pages.HomePage)}> Back </button>\n          <div id=\"listview-article-container\">\n            {\n              this.props.articles.map(article => {\n                return <ArticleTile key={article.id} article={article} changePage={this.props.changePage} />\n              })\n            }\n          </div>\n        </div>\n      )\n    }\n  };\n\n\n}\n\n// Map redux state to component state\n// This function subscribes to all store updates and gets called when\n// anything in the store changes. \n// It return an object containing the store data you\n// want to transmit as props to a component\nfunction mapStateToProps(state: DisMisState) {\n  return {\n    articles: state.searchedArticles,\n    keywords: state.keywords\n  }\n}\n\nfunction mapDispatchToProps(dispatch: any) {\n  return {\n    // Because this component doesn't change the state of the app at all\n    // we're going to leave this empty\n  }\n}\n\n\nlet connectedComponent = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(ListviewPage);\n\n\nexport default connectedComponent;"]},"metadata":{},"sourceType":"module"}