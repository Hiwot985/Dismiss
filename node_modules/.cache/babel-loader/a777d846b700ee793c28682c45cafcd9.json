{"ast":null,"code":"// Interface for the enitre AppState\n// User class that contains an email and a user id\nexport class User {\n  constructor(_id, _email, _password) {\n    this.email = void 0;\n    this.id = void 0;\n    this.password = void 0;\n    this.email = _email;\n    this.password = _password;\n    this.id = _id;\n  }\n\n} // Article class that contains essential article information as well as the ratings for that Article\n\nexport class Article {\n  constructor(_id, _title, _url, _rating, _keywords) {\n    this.id = void 0;\n    this.title = void 0;\n    this.url = void 0;\n    this.rating = void 0;\n    this.keywords = void 0;\n    this.id = _id;\n    this.title = _title;\n    this.url = _url;\n    this.rating = _rating;\n    this.keywords = _keywords;\n  }\n\n} //Rating object that contains the rating values for a specific article \n\nexport class Rating {\n  constructor(_current, _readable, _objective, _cited, _numRatings = 1) {\n    this.current = void 0;\n    this.readable = void 0;\n    this.objective = void 0;\n    this.cited = void 0;\n    this.numRatings = void 0;\n    this.current = _current;\n    this.readable = _readable;\n    this.objective = _objective;\n    this.cited = _cited;\n    this.numRatings = _numRatings;\n  }\n\n  addRating(_current, _readable, _objective, _cited) {\n    this.current += _current;\n    this.readable += _readable;\n    this.objective += _objective;\n    this.cited += _cited;\n    this.numRatings++;\n  }\n\n  getOverallRating() {\n    return (this.current + this.cited + this.readable + this.objective) / (4 * this.numRatings);\n  }\n\n  getCurrentRating() {\n    return this.current / this.numRatings;\n  }\n\n  getCitedRating() {\n    return this.cited / this.numRatings;\n  }\n\n  getReadableRating() {\n    return this.readable / this.numRatings;\n  }\n\n  getObjectiveRating() {\n    return this.readable / this.numRatings;\n  }\n\n}","map":{"version":3,"sources":["/Users/hiwottadesse/Desktop/dismis/src/redux/types.tsx"],"names":["User","constructor","_id","_email","_password","email","id","password","Article","_title","_url","_rating","_keywords","title","url","rating","keywords","Rating","_current","_readable","_objective","_cited","_numRatings","current","readable","objective","cited","numRatings","addRating","getOverallRating","getCurrentRating","getCitedRating","getReadableRating","getObjectiveRating"],"mappings":"AAAA;AAUA;AACA,OAAO,MAAMA,IAAN,CAAW;AAKdC,EAAAA,WAAW,CAACC,GAAD,EAAcC,MAAd,EAA8BC,SAA9B,EAAiD;AAAA,SAJ5DC,KAI4D;AAAA,SAH5DC,EAG4D;AAAA,SAF5DC,QAE4D;AACxD,SAAKF,KAAL,GAAaF,MAAb;AACA,SAAKI,QAAL,GAAgBH,SAAhB;AACA,SAAKE,EAAL,GAAUJ,GAAV;AACH;;AATa,C,CAYlB;;AACA,OAAO,MAAMM,OAAN,CAAc;AAOjBP,EAAAA,WAAW,CAACC,GAAD,EAAcO,MAAd,EAA8BC,IAA9B,EAA4CC,OAA5C,EAA6DC,SAA7D,EAAkF;AAAA,SAN7FN,EAM6F;AAAA,SAL7FO,KAK6F;AAAA,SAJ7FC,GAI6F;AAAA,SAH7FC,MAG6F;AAAA,SAF7FC,QAE6F;AACzF,SAAKV,EAAL,GAAUJ,GAAV;AACA,SAAKW,KAAL,GAAaJ,MAAb;AACA,SAAKK,GAAL,GAAWJ,IAAX;AACA,SAAKK,MAAL,GAAcJ,OAAd;AACA,SAAKK,QAAL,GAAgBJ,SAAhB;AAEH;;AAdgB,C,CAkBrB;;AACA,OAAO,MAAMK,MAAN,CAAa;AAOhBhB,EAAAA,WAAW,CAACiB,QAAD,EAAmBC,SAAnB,EAAsCC,UAAtC,EAA0DC,MAA1D,EAA0EC,WAAmB,GAAG,CAAhG,EAAmG;AAAA,SAN9GC,OAM8G;AAAA,SAL9GC,QAK8G;AAAA,SAJ9GC,SAI8G;AAAA,SAH9GC,KAG8G;AAAA,SAF9GC,UAE8G;AAC1G,SAAKJ,OAAL,GAAeL,QAAf;AACA,SAAKM,QAAL,GAAgBL,SAAhB;AACA,SAAKM,SAAL,GAAiBL,UAAjB;AACA,SAAKM,KAAL,GAAaL,MAAb;AACA,SAAKM,UAAL,GAAkBL,WAAlB;AACH;;AAEDM,EAAAA,SAAS,CAACV,QAAD,EAAmBC,SAAnB,EAAsCC,UAAtC,EAA0DC,MAA1D,EAA0E;AAC/E,SAAKE,OAAL,IAAgBL,QAAhB;AACA,SAAKM,QAAL,IAAiBL,SAAjB;AACA,SAAKM,SAAL,IAAkBL,UAAlB;AACA,SAAKM,KAAL,IAAcL,MAAd;AACA,SAAKM,UAAL;AACH;;AAEDE,EAAAA,gBAAgB,GAAG;AACf,WAAO,CAAC,KAAKN,OAAL,GAAe,KAAKG,KAApB,GAA4B,KAAKF,QAAjC,GAA4C,KAAKC,SAAlD,KAAgE,IAAI,KAAKE,UAAzE,CAAP;AACH;;AAEDG,EAAAA,gBAAgB,GAAG;AACf,WAAQ,KAAKP,OAAN,GAAkB,KAAKI,UAA9B;AACH;;AAEDI,EAAAA,cAAc,GAAG;AACb,WAAQ,KAAKL,KAAN,GAAgB,KAAKC,UAA5B;AACH;;AAEDK,EAAAA,iBAAiB,GAAE;AACf,WAAQ,KAAKR,QAAN,GAAmB,KAAKG,UAA/B;AACH;;AAEDM,EAAAA,kBAAkB,GAAE;AAChB,WAAQ,KAAKT,QAAN,GAAmB,KAAKG,UAA/B;AACH;;AAzCe","sourcesContent":["// Interface for the enitre AppState\nexport interface DisMisState {\n    idCounter: number,\n    currentArticle: Article,\n    currentUser: User | null,\n    articles: Array<Article>\n    keywords: string;\n    searchedArticles: Array<Article>;\n}\n\n// User class that contains an email and a user id\nexport class User {\n    email: string;\n    id: number;\n    password: string;\n\n    constructor(_id: number, _email: string, _password: string) {\n        this.email = _email;\n        this.password = _password;\n        this.id = _id;\n    }\n}\n\n// Article class that contains essential article information as well as the ratings for that Article\nexport class Article {\n    id: number;\n    title: string;\n    url: string;\n    rating: Rating;\n    keywords: string[];\n\n    constructor(_id: number, _title: string, _url: string, _rating: Rating, _keywords: string[]) {\n        this.id = _id;\n        this.title = _title;\n        this.url = _url;\n        this.rating = _rating;\n        this.keywords = _keywords;\n\n    }\n\n}\n\n//Rating object that contains the rating values for a specific article \nexport class Rating {\n    current: number;\n    readable: number;\n    objective: number;\n    cited: number;\n    numRatings: number;\n\n    constructor(_current: number, _readable: number, _objective: number, _cited: number, _numRatings: number = 1) {\n        this.current = _current\n        this.readable = _readable\n        this.objective = _objective\n        this.cited = _cited\n        this.numRatings = _numRatings;\n    }\n\n    addRating(_current: number, _readable: number, _objective: number, _cited: number) {\n        this.current += _current;\n        this.readable += _readable;\n        this.objective += _objective;\n        this.cited += _cited;\n        this.numRatings++;\n    }\n\n    getOverallRating() {\n        return (this.current + this.cited + this.readable + this.objective) / (4 * this.numRatings);\n    }\n\n    getCurrentRating() {\n        return (this.current) / (this.numRatings);\n    }\n\n    getCitedRating() {\n        return (this.cited) / (this.numRatings);\n    }\n\n    getReadableRating(){\n        return (this.readable) / (this.numRatings);\n    }\n\n    getObjectiveRating(){\n        return (this.readable) / (this.numRatings);\n    }\n\n\n}"]},"metadata":{},"sourceType":"module"}